import { describe, test } from "node:test";
import { deepEqual } from "node:assert/strict";

import shortestDistanceAfterQueries from "src/solutions/3243.shortest-distance-after-road-addition-queries-i";
import data from "src/mocks/3243.mock";

describe("3243.", () => {
  test("case 1", () => {
    deepEqual(shortestDistanceAfterQueries(...data[0]), [3, 2, 1]);
  });

  test("case 2", () => {
    deepEqual(shortestDistanceAfterQueries(...data[1]), [1, 1]);
  });

  test("case 3", () => {
    deepEqual(shortestDistanceAfterQueries(...data[2]), [13, 9]);
  });

  test("case 4", () => {
    deepEqual(shortestDistanceAfterQueries(...data[3]), [8, 6]);
  });

  test("case 5", () => {
    deepEqual(shortestDistanceAfterQueries(...data[4]), [4, 1, 1, 1]);
  });

  test("case 6", () => {
    deepEqual(shortestDistanceAfterQueries(...data[5]), [5, 4, 3, 3, 2, 2]);
  });

  test("case 7", () => {
    deepEqual(
      shortestDistanceAfterQueries(...data[6]),
      [8, 7, 7, 7, 7, 5, 4, 3, 3, 3, 3]
    );
  });

  test("case 8", () => {
    deepEqual(
      shortestDistanceAfterQueries(...data[7]),
      [
        4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
      ]
    );
  });

  test("case 9", () => {
    deepEqual(
      shortestDistanceAfterQueries(...data[8]),
      [
        4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      ]
    );
  });

  test("case 10", () => {
    deepEqual(
      shortestDistanceAfterQueries(...data[9]),
      [
        497, 494, 490, 437, 176, 116, 116, 116, 116, 116, 116, 116, 116, 89, 89,
        50, 41, 41, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
        29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
        29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
        29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
        29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
        29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
        29, 29, 29, 29, 29, 29, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14,
        14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
        14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 10, 10, 10, 10, 10,
      ]
    );
  });
});
